{"version":3,"sources":["Common/TerminalMessages.js","redux/actions/messagesActions.js","redux/actions/actionTypes.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/messagesReducers.js","redux/configureStore.js","index.js"],"names":["TerminalMessages","message","useSelector","state","messages","dispatch","useDispatch","sentTime","Date","toLocaleTimeString","sentDate","toLocaleDateString","useState","date","time","msg","data","setData","keyPressed","event","key","timestamp","value","type","payload","handleSend","style","display","justifyContent","textAlign","padding","width","color","fontFamily","fontSize","undefined","background","borderTop","borderRight","borderLeft","outline","onChange","e","preventDefault","target","onKeyDown","App","className","Boolean","window","location","hostname","match","rootReducer","combineReducers","initialState","action","configureStore","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","store","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qNAmGeA,MA/FR,WACL,IAAMC,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMC,YACvCC,EAAWC,cAEXC,GAAW,IAAIC,MAAOC,qBACtBC,GAAW,IAAIF,MAAOG,qBALK,EAOTC,mBAAS,CAAEC,KAAM,GAAIC,KAAM,GAAIC,IAAK,KAP3B,mBAO1BC,EAP0B,KAOpBC,EAPoB,KAiB3BC,EAAa,SAACC,GACA,UAAdA,EAAMC,KALO,WCfM,IAACC,EAAWC,EDgBnCjB,GChBwBgB,EDgBYL,EAAKF,KChBNQ,EDgBYN,EAAKD,ICf/C,CACLQ,KCJuB,cDKvBF,UAAWA,EACXG,QAASF,KDaTL,EAAQ,CAAEH,KAAM,GAAIC,IAAK,KAIvBU,IAIJ,OACE,6BACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,WAGlB,uBACEF,MAAO,CACLG,UAAW,QACXC,QAAS,GACTC,MAAO,IACPC,MAAO,eACPC,WAAY,YACZC,SAAU,UAGGC,IAAdnB,EAAKH,KAAqB,KAAO,UAAYH,IAGlD,yBACEgB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,eAAgBE,QAAS,KAEnE,uBACEJ,MAAO,CACLM,MAAO,eACPC,WAAY,YACZC,SAAU,GACVE,WAAY,qBAGOD,IAApBlC,EAAQuB,QAAwB,KAAO,MAAQvB,EAAQuB,SAE1D,uBACEE,MAAO,CACLM,MAAO,eACPC,WAAY,YACZC,SAAU,GACVE,WAAY,SAGZnC,EAAQoB,UAAmB,IAAMpB,EAAQoB,UAArB,OAI1B,yBACEK,MAAO,CACLC,QAAS,OACTC,eAAgB,WAGlB,2BACEF,MAAO,CACLM,MAAO,eACPC,WAAY,YACZC,SAAU,GACVH,MAAO,IACPM,UAAW,EACXC,YAAa,EACbC,WAAY,EACZC,QAAS,OACTJ,WAAY,eAEdK,SAAU,SAACC,GAAD,OA9EKvB,EA8EgBuB,GA7E/BC,eAAexB,QACrBF,EAAQ,CAAEJ,KAAMH,EAAUI,KAAMP,EAAUQ,IAAKI,EAAMyB,OAAOtB,QAFxC,IAACH,GA+Ef0B,UAAW,SAACH,GAAD,OAAOxB,EAAWwB,S,MG3ExBI,MARf,WACE,OACE,yBAAKC,UAAW,OACd,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBS,GAEbhD,SAAU,ICEZ,IAKeiD,EALKC,YAAgB,CAElClD,SCHa,WAAyD,IAAxCD,EAAuC,uDAA/BoD,EAAanD,SAAUoD,EAAQ,uCACrE,OAAQA,EAAOjC,MACb,ILLuB,cKMrB,OAAO,2BAAKpB,GAAZ,IAAmBkB,UAAWmC,EAAOnC,UAAWG,QAASgC,EAAOhC,UAClE,ILNoB,WKOlB,OAAOgC,EAAOpD,SAChB,QACE,OAAOD,M,yBCOEsD,EAZQ,SAACF,GACtB,IAAMG,EACe,qBAAXT,QACNA,OAAOU,sCACTC,IACF,OAAOC,YACLR,EACAE,EACAG,EAAiBI,YAAgBC,IAAOC,U,QCHtCC,G,MAAQR,KAEdS,iBACE,kBAAC,IAAD,CAAeD,MAAOA,GACpB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJE,SAASC,eAAe,SLiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3E,c","file":"static/js/main.924cc01b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as actionsCreator from \"../redux/actions/messagesActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport function TerminalMessages() {\n  const message = useSelector((state) => state.messages);\n  const dispatch = useDispatch();\n\n  const sentTime = new Date().toLocaleTimeString();\n  const sentDate = new Date().toLocaleDateString();\n\n  const [data, setData] = useState({ date: \"\", time: \"\", msg: \"\" });\n\n  const handleMessage = (event) => {\n    event.preventDefault(event);\n    setData({ date: sentDate, time: sentTime, msg: event.target.value });\n  };\n  const handleSend = () => {\n    dispatch(actionsCreator.add_message(data.time, data.msg));\n    setData({ time: \"\", msg: \"\" });\n  };\n  const keyPressed = (event) => {\n    if (event.key === \"Enter\") {\n      handleSend();\n    }\n  };\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <p\n          style={{\n            textAlign: \"right\",\n            padding: 10,\n            width: 500,\n            color: \"rgb(0,255,0)\",\n            fontFamily: \"monospace\",\n            fontSize: 16,\n          }}\n        >\n          {data.date !== undefined ? null : \"Today_:\" + sentDate}\n        </p>\n      </div>\n      <div\n        style={{ display: \"flex\", justifyContent: \"space-evenly\", padding: 10 }}\n      >\n        <p\n          style={{\n            color: \"rgb(0,255,0)\",\n            fontFamily: \"monospace\",\n            fontSize: 16,\n            background: \"transparent\",\n          }}\n        >\n          {message.payload === undefined ? null : \"~$ \" + message.payload}\n        </p>\n        <p\n          style={{\n            color: \"rgb(0,255,0)\",\n            fontFamily: \"monospace\",\n            fontSize: 16,\n            background: \"blue\",\n          }}\n        >\n          {!message.timestamp ? null : \"@\" + message.timestamp}\n        </p>\n      </div>\n\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <input\n          style={{\n            color: \"rgb(0,255,0)\",\n            fontFamily: \"monospace\",\n            fontSize: 16,\n            width: 450,\n            borderTop: 0,\n            borderRight: 0,\n            borderLeft: 0,\n            outline: \"none\",\n            background: \"transparent\",\n          }}\n          onChange={(e) => handleMessage(e)}\n          onKeyDown={(e) => keyPressed(e)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TerminalMessages;\n","import * as types from \"./actionTypes\";\n\nexport const add_message = (timestamp, value) => {\n  return {\n    type: types.ADD_MESSAGE,\n    timestamp: timestamp,\n    payload: value,\n  };\n};\n\nexport const messages = () => {\n  return { type: types.MESSAGES };\n};\n","export const ADD_MESSAGE = \"ADD_MESSAGE\";\nexport const MESSAGES = \"MESSAGES\";\n","import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\n\n// Components\n\nimport TerminalMessages from \"./Common/TerminalMessages\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className={\"App\"}>\n      <TerminalMessages />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  // Feature types are here..\n  messages: [],\n};\n","import { combineReducers } from \"redux\";\n//Feature reducers  headerr are here .....\nimport messages from \"./messagesReducers\";\n\nconst rootReducer = combineReducers({\n  //Feature reducers here below\n  messages,\n});\n\nexport default rootReducer;\n","import * as Types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function counter(state = initialState.messages, action) {\n  switch (action.type) {\n    case Types.ADD_MESSAGE:\n      return { ...state, timestamp: action.timestamp, payload: action.payload };\n    case Types.MESSAGES:\n      return action.messages;\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\nimport thunk from \"redux-thunk\";\n\nconst configureStore = (initialState) => {\n  const composeEnhancers =\n    (typeof window !== \"undefined\" &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\n  );\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/configureStore\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = configureStore();\n\nrender(\n  <ReduxProvider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}