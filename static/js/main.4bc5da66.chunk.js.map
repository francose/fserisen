{"version":3,"sources":["Common/Welcome.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/subscriberReducers.js","redux/actions/actionTypes.js","redux/configureStore.js","index.js"],"names":["Box","terminal","command","useState","flag","setFlag","useEffect","setTimeout","Jumbotron","style","styles","terminalText","options","autoStart","onInit","typewriter","typeString","start","pauseFor","deleteAll","pasteString","Header","Container","fluid","Row","className","Col","xs","lg","background","borderRadius","display","justifyContent","color","fontFamily","App","Boolean","window","location","hostname","match","subscriber","rootReducer","combineReducers","subcribers","state","initialState","action","type","configureStore","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","store","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAIMA,EAAM,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAAc,EACbC,oBAAS,GADI,mBAC9BC,EAD8B,KACxBC,EADwB,OAEfF,qBAFe,6BAUrC,OALAG,qBAAU,WACRC,YAAW,WACTF,GAAQ,KACP,OACF,IAED,kBAACG,EAAA,EAAD,CAAWC,MAAOC,EAAOT,UACvB,yBAAKQ,MAAOC,EAAOC,cAAeV,GAClC,yBAAKQ,MAAOC,EAAOC,eACP,IAATP,GACC,kBAAC,IAAD,CACEQ,QAAS,CAAEC,WAAW,GACtBC,OAAQ,SAACC,GACPA,EAAWC,WAAWd,GAASe,YAI3B,IAATb,GACC,kBAAC,IAAD,CACEQ,QAAS,CAAEC,WAAW,GACtBC,OAAQ,SAACC,GACPA,EACGG,SAAS,KACTF,WAAW,SACXE,SAAS,KACTC,UAAU,IACVC,YA3Bb,oEA4BaH,cAsBFI,EAbA,WAGb,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CAAKC,UAAU,6BACb,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,KACT,kBAAC,EAAD,CAAK3B,SANI,MAMgBC,QALjB,2BAIV,QASFQ,EAAS,CACbT,SAAU,CACR4B,WAAY,cACZC,aAAc,EACdC,QAAS,OACTC,eAAgB,gBAElBrB,aAAc,CACZsB,MAAO,iBACPC,WAAY,c,MC5CDC,MAhBf,WACE,OACE,yBAAKV,UAAW,OACd,kBAAC,EAAD,QCAcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBS,GAEbC,WAAY,ICEd,IAKeC,EALKC,YAAgB,CAElCC,WCHa,WAGZ,IAFDC,EAEA,uDAFQC,EAAaL,WACrBM,EACA,uCACA,OAAQA,EAAOC,MACb,ICR6B,oBDU3B,OAAOD,EAAON,WAChB,QACE,OAAOI,M,yBEKEI,EAZQ,SAACH,GACtB,IAAMI,EACe,qBAAXb,QACNA,OAAOc,sCACTC,IACF,OAAOC,YACLX,EACAI,EACAI,EAAiBI,YAAgBC,IAAOC,U,gBCHtCC,G,MAAQR,KAEdS,iBACE,kBAAC,IAAD,CAAeD,MAAOA,GACpB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJE,SAASC,eAAe,SNiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4bc5da66.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Container, Jumbotron, Row, Col } from \"react-bootstrap\";\nimport Typewriter from \"typewriter-effect\";\n\nconst Box = ({ terminal, command }) => {\n  const [flag, setFlag] = useState(true);\n  const [val, setVal] = useState();\n  const navList =\n    \"<p> a) Git </p> <br> <p> b) Education</p> <br> <p> c) Skills</p>\";\n  useEffect(() => {\n    setTimeout(() => {\n      setFlag(false);\n    }, 5000);\n  }, []);\n  return (\n    <Jumbotron style={styles.terminal}>\n      <div style={styles.terminalText}>{terminal}</div>\n      <div style={styles.terminalText}>\n        {flag === true && (\n          <Typewriter\n            options={{ autoStart: true }}\n            onInit={(typewriter) => {\n              typewriter.typeString(command).start();\n            }}\n          />\n        )}\n        {flag !== true && (\n          <Typewriter\n            options={{ autoStart: true }}\n            onInit={(typewriter) => {\n              typewriter\n                .pauseFor(2000)\n                .typeString(\".....\")\n                .pauseFor(2000)\n                .deleteAll(10)\n                .pasteString(navList)\n                .start();\n            }}\n          />\n        )}\n      </div>\n    </Jumbotron>\n  );\n};\n\nconst Header = () => {\n  const terminal = \"~$:\";\n  const command = \"sudo ./sadik_erisen.h \";\n  return (\n    <Container fluid>\n      <Row className=\"justify-content-lg-center\">\n        <Col xs lg=\"6\">\n          <Box terminal={terminal} command={command} />;\n        </Col>\n      </Row>\n    </Container>\n  );\n};\nexport default Header;\n\nconst styles = {\n  terminal: {\n    background: \"transparent\",\n    borderRadius: 0,\n    display: \"flex\",\n    justifyContent: \"'flex-start'\",\n  },\n  terminalText: {\n    color: \"rgb(0, 255, 0)\",\n    fontFamily: \"monospace\",\n  },\n};\n","import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\n\n// Components\nimport Header from \"./Common/header\";\nimport Terminal from \"./Common/Welcome\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className={\"App\"}>\n      <Terminal />\n    </div>\n\n    // <Container>\n    //   <Header />\n    //   <Switch>\n    //     <Route path=\"/\" exact component={HomePage} />\n    //     <Route component={PageNotFound} />\n    //   </Switch>\n    // </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  // Feature types are here..\n  subscriber: [],\n};\n","import { combineReducers } from \"redux\";\n//Feature reducers  headerr are here .....\nimport subcribers from \"./subscriberReducers\";\n\nconst rootReducer = combineReducers({\n  //Feature reducers here below\n  subcribers,\n});\n\nexport default rootReducer;\n","import * as types from \"./../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function authorsReducer(\n  state = initialState.subscriber,\n  action\n) {\n  switch (action.type) {\n    case types.CREATE_SUBSCRIBER:\n      //   debugger;\n      return action.subscriber;\n    default:\n      return state;\n  }\n}\n","export const CREATE_SUBSCRIBER = \"CREATE_SUBSCRIBER\";\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\nimport thunk from \"redux-thunk\";\n\nconst configureStore = (initialState) => {\n  const composeEnhancers =\n    (typeof window !== \"undefined\" &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\n  );\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/configureStore\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = configureStore();\n\nrender(\n  <ReduxProvider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}