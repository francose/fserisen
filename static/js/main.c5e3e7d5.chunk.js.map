{"version":3,"sources":["MainScene/TerminalMessages.js","redux/actions/messagesActions.js","redux/actions/actionTypes.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/messagesReducers.js","redux/configureStore.js","index.js"],"names":["TerminalMessages","useState","data","setData","flag","setFlag","vis","setVis","id","setId","storeData","useSelector","state","messages","dispatch","useDispatch","sentTime","Date","toLocaleTimeString","payload","timestamp","msg","sentDate","toLocaleDateString","style","padding","background","color","fontFamily","fontSize","className","visibility","map","e","i","key","onChange","event","preventDefault","target","value","length","onKeyDown","type","keyPressed","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","initialState","action","configureStore","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","store","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5e3e7d5.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport * as actionsCreator from \"../redux/actions/messagesActions\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\n\nexport function TerminalMessages() {\n  const [data, setData] = useState([]);\n  const [flag, setFlag] = useState(false);\n  const [vis, setVis] = useState(false);\n  const [id, setId] = useState(0);\n  const storeData = useSelector((state) => state.messages);\n  const dispatch = useDispatch();\n  const sentTime = new Date().toLocaleTimeString();\n  const payload = {\n    id: id,\n    timestamp: sentTime,\n    msg: data[0],\n  };\n  const sentDate = new Date().toLocaleDateString();\n\n  const handleMessage = (event) => {\n    event.preventDefault();\n\n    if (event.target.value.length > 35) {\n      setFlag(true);\n    } else {\n      setFlag(false);\n    }\n\n    setData([event.target.value]);\n  };\n\n  const keyPressed = (event) => {\n    if (event.key === \"Enter\" && event.target.value !== \"\") {\n      setId(id + 1);\n      dispatch(actionsCreator.add_message(payload));\n      setData([]);\n      setFlag(false);\n      if (payload.msg === \"./help_menu.sh\") return setVis(true);\n    }\n  };\n\n  const hanndleMenu = (e) => {};\n\n  return (\n    <div>\n      <div\n        style={{\n          padding: 2,\n          background: \"rgba(33,150,243,.05)\",\n          color: \"whitesmoke\",\n          fontFamily: \"Monaco\",\n          fontSize: 12,\n        }}\n      >\n        last login: {sentDate} {sentTime} on ttys001\n      </div>\n      <div\n        className={\"weicomeMessageBox\"}\n        style={{ visibility: !vis ? vis : \"hidden\" }}\n      >\n        <div className={\"welcomeMessage\"}>\n          <span>please type => \"./help_menu.sh\" to start</span>\n        </div>\n      </div>\n\n      <div className={\"terminal\"}>\n        {/* command line output section */}\n\n        {storeData.map((e, i) => (\n          <div className={\"terminal-output\"} key={i}>\n            <div>\n              <span\n                style={{\n                  padding: 2,\n                  background: \"rgba(33,150,243,1)\",\n                  color: \"whitesmoke\",\n                  fontFamily: \"Monaco\",\n                  fontSize: 12,\n                }}\n              >\n                {\">\"}\n              </span>\n              <span\n                style={{\n                  padding: 2,\n                  color: \"whitesmoke\",\n                  fontFamily: \"Monaco\",\n                  fontSize: 12,\n                }}\n              >\n                {e.msg}\n              </span>\n            </div>\n            <div>\n              <span\n                style={{\n                  padding: 2,\n                  background: \"lightgrey\",\n                  color: \"#000\",\n                  fontFamily: \"Monaco\",\n                  fontSize: 12,\n                }}\n              >\n                {\"at \"}\n                {e.timestamp}\n              </span>\n            </div>\n          </div>\n        ))}\n\n        {/* command line input section */}\n        <div className={\"terminal-input\"}>\n          <div>\n            <span\n              style={{\n                padding: 2,\n                background: \"rgba(255,235,59,1)\",\n                color: \"#000\",\n                fontFamily: \"Monaco\",\n                fontSize: 12,\n              }}\n            >\n              {\"user\"}\n            </span>\n            <span\n              style={{\n                padding: 2,\n                background: \"rgba(33,150,243,1)\",\n                color: \"#000\",\n                fontFamily: \"Monaco\",\n                fontSize: 12,\n              }}\n            >\n              {\"~/\"}\n            </span>\n          </div>\n          <input\n            className={\"InputField\"}\n            onChange={(e) => {\n              handleMessage(e);\n            }}\n            value={data}\n            onKeyDown={(e) => keyPressed(e)}\n          />\n          <p>\n            <span\n              style={{\n                padding: 2,\n                visibility: !flag ? flag : \"hidden\",\n                background: \"lightgrey\",\n                color: \"#000\",\n                fontFamily: \"Monaco\",\n                fontSize: 12,\n              }}\n            >\n              {\"at \"}\n              {sentTime}\n            </span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TerminalMessages;\n","import * as types from \"./actionTypes\";\n\nexport const add_message = (obj) => {\n  return {\n    type: types.ADD_MESSAGE,\n    payload: obj,\n  };\n};\n","export const ADD_MESSAGE = \"ADD_MESSAGE\";\nexport const MESSAGES = \"MESSAGES\";\n","import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\n\n// Components\n\nimport TerminalMessages from \"./MainScene/TerminalMessages\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className={\"App\"}>\n      <TerminalMessages />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  messages: [],\n};\n","import { combineReducers } from \"redux\";\n//Feature reducers  headerr are here .....\nimport messages from \"./messagesReducers\";\n\nconst rootReducer = combineReducers({\n  //Feature reducers here below\n  messages,\n});\n\nexport default rootReducer;\n","import * as Types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function counter(state = initialState.messages, action) {\n  switch (action.type) {\n    case Types.ADD_MESSAGE:\n      return [...state, action.payload];\n\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\nimport thunk from \"redux-thunk\";\n\nconst configureStore = (initialState) => {\n  const composeEnhancers =\n    (typeof window !== \"undefined\" &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\n  );\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/configureStore\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = configureStore();\n\nrender(\n  <ReduxProvider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}