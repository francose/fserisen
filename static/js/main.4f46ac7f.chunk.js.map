{"version":3,"sources":["MainScene/commandline-header.js","MainScene/commandline-body.js","redux/actions/setRedirect.js","redux/actions/actionTypes.js","MainScene/commandline-input.js","redux/actions/messagesActions.js","WebSite/main.js","MainScene/TerminalMessages.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/messagesReducers.js","redux/reducers/redirectStart.js","redux/configureStore.js","index.js"],"names":["CommandlineWelcomePart","date","time","style","padding","background","color","fontFamily","fontSize","marginLeft","textAlign","className","map","i","availableMethods","listView","CommandlineOuput_bodyfield","outputData","useState","value","setValue","verify","includes","inputCommand","toLowerCase","split","dispatch","useDispatch","useEffect","command","slice","type","payload","toString","undefined","stringA","stringB","length","matchStrings","indexOf","Array","isArray","sort","e","key","CommandlineOuputField","source","messages","timestamp","TerminalInput","data","setData","flag","setFlag","id","setId","onChange","event","preventDefault","target","handleMessage","onKeyDown","visibility","main","TerminalMessages","loading","setloading","sentTime","Date","toLocaleTimeString","sentDate","toLocaleDateString","storeData","useSelector","state","redirect","setTimeout","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","initialState","action","configureStore","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","store","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f46ac7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst CommandlineWelcomePart = ({ date, time }) => {\n  const more =  [\"You can navigate through by typing available commands for example;\", \" to execute => .</filename>\" , \"to run a command --foo\"]\n  return (\n    <>\n      <div\n        style={{\n          padding: 2,\n          background: \"rgba(33,150,243,.05)\",\n          color: \"whitesmoke\",\n          fontFamily: \"Monaco\",\n          fontSize: 12,\n        }}\n      >\n        last login: {date} {time} on ttys000\n        <span\n          style={{\n            padding: 2,\n            background: \"lightgrey\",\n            color: \"#000\",\n            fontFamily: \"Monaco\",\n            fontSize: 12,\n            marginLeft: 100,\n            textAlign: \"right\",\n          }}\n        >\n          MyOS\n        </span>\n      </div>\n      <div className={\"weicomeMessageBox\"}>\n      <div className={\"welcomeMessageNext\"}>\n         {\n            more.map((i)=>(\n              <p>{i}</p>\n            ))\n          }\n         </div>\n        <div className={\"welcomeMessage\"}>\n          <p>please type => \"start\" to begin </p>\n          <p>To see available commands => \"--help\" </p>\n          \n        </div>\n   \n      </div>\n    </>\n  );\n};\n\nexport default CommandlineWelcomePart;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport * as setRedirection from \"../redux/actions/setRedirect\";\n\nconst availableMethods = [\"start\", \"ls\", \"cd\" ,\"echo\", \"clear\", \"--help\"];\nconst listView = [\"etc\", \"opt\",\"bin\",\"./sadikerisen\", \"home\"]\n\nconst matchStrings=(stringA, stringB)=>{\n  \n    if (stringB !== undefined || stringB === null){\n      \n        if (stringA.toString().split(\"\").length !== stringB.toString().split(\"\").length){ \n          return false\n      }else {\n        for (const i in stringA.toString().split(\"\")){\n          if (stringA.toString().split(\"\")[i]=== stringB.toString().split(\"\")[i]) return true\n          return  false\n        }\n      }\n    }\n    else{\n      return \"wrong input\"\n    }\n  \n}\n\nconst CommandlineOuput_bodyfield = (outputData) => {\n  const [value, setValue] = useState([]);\n  const verify = availableMethods.includes(outputData.outputData);\n  const inputCommand = outputData.outputData.toLowerCase().split(/ (.*)/);\n  const dispatch = useDispatch();\n  \n  \n  useEffect(() => {\n    const command = inputCommand[0]\n    switch (command) {\n      case \"ls\":\n        return setValue(listView);\n\n      case \"echo\":\n        return setValue(inputCommand.slice(1)[0]);\n\n      case \"--help\":\n        return setValue(availableMethods);\n\n      case \"start\":\n        const connecting = \"connecting...\"\n        dispatch(setRedirection.setRedirect(true))\n        return   setValue([connecting])\n        // return setInterval(() => {\n        //   setValue([connecting]),\n       \n        //   // setRedirect(true)\n        // }, 800);\n    \n      case command.includes(\"cd\") ? command.toString(): null:\n        if(inputCommand[1]!==undefined){\n          const verify = matchStrings(inputCommand[1].toString(), \n          listView[listView.indexOf(!listView.includes(inputCommand[1]) ?\n           null\n           : inputCommand[1].toString()\n           )])\n          if (verify === true){\n            return setValue([`interpreter: Permission denied`]);      \n          }else{\n            return setValue([`cd: no such file or directory: ${inputCommand[1]}`]);      \n          }\n        }else{\n          return setValue([`${command}`]); \n        }\n            \n          \n      default:\n        return setValue([\"cannot find the command\"]);\n    }\n\n\n  }, []);\n\n  return verify ? (\n    <div>\n      <span\n        style={{\n          padding: 2,\n          color: \"whitesmoke\",\n          fontFamily: \"Monaco\",\n          fontSize: 12,\n        }}\n      >\n        {\"> \"}\n      </span>\n      {Array.isArray(value) ? (\n        value.sort().map((e, i) => (\n          <span\n            style={{\n              padding: 2,\n              color: \"whitesmoke\",\n              fontFamily: \"Monaco\",\n              fontSize: 12,\n            }}\n            key={i}\n          >\n            {e}{\" \"}\n          </span>\n        ))\n      ) : (\n        <span\n          style={{\n            padding: 2,\n            color: \"whitesmoke\",\n            fontFamily: \"Monaco\",\n            fontSize: 12,\n          }}\n        >\n          value\n        </span>\n      )}\n    </div>\n  ) : (\n    <div>\n      <span\n        style={{\n          padding: 2,\n          color: \"whitesmoke\",\n          fontFamily: \"Monaco\",\n          fontSize: 12,\n        }}\n      >\n        {\"> \"}\n      </span>\n      <span\n        style={{\n          padding: 2,\n          color: \"whitesmoke\",\n          fontFamily: \"Monaco\",\n          fontSize: 12,\n        }}\n      >\n        {value}\n      </span>\n\n    </div>\n  );\n};\n\nconst CommandlineOuputField = (source) => {\n  return source !== null\n    ? source.source.messages.map((e, i) => (\n        <>\n          <div className={\"terminal-output\"}>\n            <div>\n              <span\n                style={{\n                  padding: 2,\n                  background: \"rgba(33,150,243,1)\",\n                  color: \"whitesmoke\",\n                  fontFamily: \"Monaco\",\n                  fontSize: 12,\n                }}\n                key={i}\n              >\n                {\">>\"}\n              </span>\n              <span\n                style={{\n                  padding: 2,\n                  color: \"whitesmoke\",\n                  fontFamily: \"Monaco\",\n                  fontSize: 12,\n                }}\n              >\n                {e.command}\n              </span>\n            </div>\n\n            <div>\n              <span\n                style={{\n                  padding: 2,\n                  background: \"lightgrey\",\n                  color: \"#000\",\n                  fontFamily: \"Monaco\",\n                  fontSize: 12,\n                }}\n              >\n                {\"at \"}\n                {e.timestamp}\n              </span>\n            </div>\n          </div>\n          <CommandlineOuput_bodyfield outputData={e.command} />\n        </>\n      ))\n    : null;\n};\nexport default CommandlineOuputField;\n","import * as types from \"./actionTypes\";\n\nexport const setRedirect = (val) => {\n  \n  return {\n    type: types.START,\n    payload: val,\n  };\n};","export const ADD_MESSAGE = \"ADD_MESSAGE\";\nexport const START = \"START\";\n","import React, { useState } from \"react\";\nimport * as MessageActionsCreator from \"../redux/actions/messagesActions\";\nimport { useDispatch } from \"react-redux\";\n\nconst TerminalInput = ({ time }) => {\n  const [data, setData] = useState([]);\n  const [flag, setFlag] = useState(false);\n  const [id, setId] = useState(0);\n  const dispatch = useDispatch();\n\n  const payload = {\n    id: id,\n    timestamp: time,\n    command: data[0],\n  };\n\n  const handleMessage = (event) => {\n    event.preventDefault();\n    const x = event.target.value.length > 35 ? setFlag(true) : setFlag(false);\n    setData([event.target.value]);\n  };\n\n  const keyPressed = (event) => {\n    if (event.key === \"Enter\" && event.target.value !== \"\") {\n      setId(id + 1);\n      dispatch(MessageActionsCreator.add_message(payload));\n      setFlag(false);\n      setData([]);\n    }\n  };\n  return (\n    <div className={\"terminal-input\"}>\n      <div>\n        <span\n          style={{\n            padding: 2,\n            background: \"rgba(255,235,59,1)\",\n            color: \"#000\",\n            fontFamily: \"Monaco\",\n            fontSize: 12,\n          }}\n        >\n          {\"user\"}\n        </span>\n        <span\n          style={{\n            padding: 2,\n            background: \"rgba(33,150,243,1)\",\n            color: \"#000\",\n            fontFamily: \"Monaco\",\n            fontSize: 12,\n          }}\n        >\n          {\"~/\"}\n        </span>\n      </div>\n\n      <input\n        className={\"InputField\"}\n        onChange={(e) => {\n          handleMessage(e);\n        }}\n        value={data}\n        onKeyDown={(e) => keyPressed(e)}\n      />\n      <p>\n        <span\n          style={{\n            padding: 2,\n            visibility: !flag ? flag : \"hidden\",\n            background: \"lightgrey\",\n            color: \"#000\",\n            fontFamily: \"Monaco\",\n            fontSize: 12,\n          }}\n        >\n          {\"at \"}\n          {time}\n        </span>\n      </p>\n    </div>\n  );\n};\n\nexport default TerminalInput;\n","import * as types from \"./actionTypes\";\n\nexport const add_message = (obj) => {\n  return {\n    type: types.ADD_MESSAGE,\n    payload: obj,\n  };\n};\n","import React from \"react\"\n\n\nconst main=()=>{\n    return (\n        <div>\n         <h1 style={{\"color\":\"white\"}}>{`WELCOME -> Guest `}</h1>\n        </div>\n    )\n}\n\nexport default main;","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CommandlineWelcomePart from \"./commandline-header\";\nimport CommandlineOuputField from \"./commandline-body\";\nimport TerminalInput from \"./commandline-input\";\nimport Main from \"./../WebSite/main\"\n\n\nconst splashScene = ()=>{\n  return <div>\n    <div >\n        <h1 className={\"LoaderText\"}>Please wait while loading...</h1>\n      </div>\n    <div className={\"LoaderBox\"}>\n       <div className={\"loader\"}></div>\n    </div>\n  </div>\n}\n\nexport function TerminalMessages() {\n  const [loading, setloading] = useState(true)\n  const sentTime = new Date().toLocaleTimeString();\n  const sentDate = new Date().toLocaleDateString();\n  const storeData = useSelector((state) => ({\n    messages: state.messages,\n    redirect: state.redirect\n  }));\n   useEffect(()=>{\n     setTimeout(()=>{\n      setloading(false)\n     }, 18500)\n  },[])\n  return (\n    storeData.redirect !== true?(\n    <div >\n      {/* Commandline Welocome portion on the top */}\n      <CommandlineWelcomePart date={sentDate} time={sentTime} />\n      <div className={\"terminal\"}>\n        {/* command line output section */}\n        <CommandlineOuputField source={storeData} />\n        {/* command line input section */}\n        <TerminalInput time={sentTime} />\n      </div>\n    </div>):(\n      !loading ? \n      <Main />\n      :\n      splashScene()\n    )\n  );\n}\n\nexport default TerminalMessages;\n","import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\n\n// Components\n\nimport TerminalMessages from \"./MainScene/TerminalMessages\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className={\"App\"}>\n      <TerminalMessages />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n  messages: [],\n  redirect: false\n};\n","import { combineReducers } from \"redux\";\n//Feature reducers  headerr are here .....\nimport messages from \"./messagesReducers\";\nimport redirect from \"./redirectStart\";\n\nconst rootReducer = combineReducers({\n  //Feature reducers here below\n  messages,\n  redirect\n});\n\nexport default rootReducer;\n","import * as Types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function counter(state = initialState.messages, action) {\n  switch (action.type) {\n    case Types.ADD_MESSAGE:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n}\n","import * as Types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\n\nexport default function setRedirect(state = initialState.redirect, action) {\n    switch (action.type) {\n      case Types.START:\n        \n        state = action.payload \n        return state;\n      default:\n        return state;\n    }\n  }","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\nimport thunk from \"redux-thunk\";\n\nconst configureStore = (initialState) => {\n  const composeEnhancers =\n    (typeof window !== \"undefined\" &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\n  );\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/configureStore\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = configureStore();\n\nrender(\n  <ReduxProvider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}